# config/services.yaml
services:

  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  VentureLeap\LeapOnePhpSdk\:
    resource: '../../../src/*'

  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\UserApiProvider:
    arguments:
      $userServiceHost: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\UserService\Api\UserApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\UserApiProvider', 'getUserApi' ]

  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\TokenApiProvider:
    arguments:
      $configurationServiceHost: '%env(string:LEAP_ONE_ENDPOINT_URL)%'
      $applicationId: '%env(string:LEAP_ONE_APP_ID)%'
      $applicationSecret: '%env(string:LEAP_ONE_APP_SECRET)%'

  VentureLeap\ConfigurationService\Api\TokenApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\TokenApiProvider', 'getTokenApi' ]

  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ConfigurationEntryApiProvider:
    arguments:
      $configurationServiceHost: '%env(string:LEAP_ONE_ENDPOINT_URL)%'
      $applicationId: '%env(string:LEAP_ONE_APP_ID)%'

  VentureLeap\ConfigurationService\Api\ConfigurationEntryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ConfigurationEntryApiProvider', 'getConfigurationApi' ]
