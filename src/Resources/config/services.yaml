# config/services.yaml
services:

  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  VentureLeap\LeapOnePhpSdk\:
    resource: '../../../src/*'

  # MESSENGER
  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\MessengerApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\MessengerService\Api\MessageApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\MessengerApiProvider', 'getMessageApi' ]

  VentureLeap\MessengerService\Api\TemplateApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\MessengerApiProvider', 'getTemplateApi' ]

  VentureLeap\MessengerService\Api\ConfigurationEntryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\MessengerApiProvider', 'getConfigurationEntryApi' ]

  # ORDER
  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\OrderApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\OrderService\Api\OrderApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\OrderApiProvider', 'getOrderApi' ]

  VentureLeap\OrderService\Api\OrderProductApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\OrderApiProvider', 'getOrderProductApi' ]

  VentureLeap\OrderService\Api\ConfigurationEntryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\OrderApiProvider', 'getConfigurationEntryApi' ]

  # USER
  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\UserApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\UserService\Api\UserApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\UserApiProvider', 'getUserApi' ]

  VentureLeap\UserService\Api\ConfigurationEntryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\UserApiProvider', 'getConfigurationEntryApi' ]

  VentureLeap\UserService\Api\SocialAuthenticationApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\UserApiProvider', 'getSocialAuthenticationApi' ]

  # AUDIT LOG
  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\AuditLogApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\AuditLogService\Api\AuditLogEntryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\AuditLogApiProvider', 'getAuditLogEntryApi' ]

  VentureLeap\AuditLogService\Api\ConfigurationEntryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\AuditLogApiProvider', 'getConfigurationEntryApi' ]


  # Product
  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ProductApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\ProductService\Api\ProductApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ProductApiProvider', 'getProductApi' ]

  VentureLeap\ProductService\Api\ProductCategoryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ProductApiProvider', 'getProductCategoryApi' ]

  VentureLeap\ProductService\Api\PriceListProductApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ProductApiProvider', 'getPriceListProductApi' ]

  VentureLeap\ProductService\Api\PriceListApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ProductApiProvider', 'getPriceListApi' ]

  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ConfigurationApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\ConfigurationService\Api\ConfigurationEntryApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\ConfigurationApiProvider', 'getConfigurationEntryApi' ]

  # TOKEN
  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\TokenApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\ConfigurationService\Api\TokenApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\TokenApiProvider', 'getTokenApi' ]

  VentureLeap\LeapOnePhpSdk\Services\TokenProvider\TokenProvider:
    arguments:
      $applicationId: '%env(string:LEAP_ONE_APP_ID)%'
      $applicationSecret: '%env(string:LEAP_ONE_APP_SECRET)%'

  # Rating
  VentureLeap\LeapOnePhpSdk\Services\ApiProvider\RatingApiProvider:
    arguments:
      $endpoint: '%env(string:LEAP_ONE_ENDPOINT_URL)%'

  VentureLeap\RatingService\Api\RatingApi:
    factory: [ '@VentureLeap\LeapOnePhpSdk\Services\ApiProvider\RatingApiProvider', 'getRatingApi' ]

  # FORM AUTHENTICATION
  leap_one.login_form_authenticator:
    class: VentureLeap\LeapOnePhpSdk\Services\Security\LoginFormAuthenticator
    public: true
    arguments:
      $loginRoute: 'leap_one_user_login'
    tags: [ 'leap_one.login_form_authenticators' ]


  VentureLeap\LeapOnePhpSdk\Services\Audit\Configuration:
    class: VentureLeap\LeapOnePhpSdk\Services\Audit\Configuration
    arguments:
      - '%leap_one_php_sdk.configuration%'

  VentureLeap\LeapOnePhpSdk\Services\Audit\Auditor:
    class: VentureLeap\LeapOnePhpSdk\Services\Audit\Auditor
    arguments:
      - '@VentureLeap\LeapOnePhpSdk\Services\Audit\Configuration'
      - '@event_dispatcher'
      - '@VentureLeap\LeapOnePhpSdk\Services\AuditLogEntryManager'


  # DoctrineProvider services
  VentureLeap\LeapOnePhpSdk\Services\Doctrine\Configuration:
    class: VentureLeap\LeapOnePhpSdk\Services\Doctrine\Configuration
    arguments:
      - '%leap_one_php_sdk.provider.doctrine.configuration%'

  VentureLeap\LeapOnePhpSdk\Services\Doctrine\DoctrineProvider:
    class: VentureLeap\LeapOnePhpSdk\Services\Doctrine\DoctrineProvider
    arguments:
      - '@VentureLeap\LeapOnePhpSdk\Services\Doctrine\Configuration'
    calls:
      - [setAuditor, ['@VentureLeap\LeapOnePhpSdk\Services\Audit\Auditor']]
    tags:
      - { name: leap_one_php_sdk.provider }
  leap_one_php_sdk.provider.doctrine: '@VentureLeap\LeapOnePhpSdk\Services\Doctrine\DoctrineProvider'

  VentureLeap\LeapOnePhpSdk\Services\Audit\User\UserProvider:
    class: VentureLeap\LeapOnePhpSdk\Services\Audit\User\UserProvider
    arguments: ['@security.helper', '@VentureLeap\LeapOnePhpSdk\Services\Doctrine\Configuration']
  leap_one_php_sdk.user_provider: '@VentureLeap\LeapOnePhpSdk\Services\Audit\User\UserProvider'

  VentureLeap\LeapOnePhpSdk\Services\Audit\Security\SecurityProvider:
    class: VentureLeap\LeapOnePhpSdk\Services\Audit\Security\SecurityProvider
    arguments: ['@request_stack', '@security.firewall.map']
  leap_one_php_sdk.security_provider: '@VentureLeap\LeapOnePhpSdk\Services\Audit\Security\SecurityProvider'

  VentureLeap\LeapOnePhpSdk\Services\Audit\Security\RoleChecker:
    class: VentureLeap\LeapOnePhpSdk\Services\Audit\Security\RoleChecker
    arguments: ['@security.helper', '@VentureLeap\LeapOnePhpSdk\Services\Doctrine\DoctrineProvider']
  leap_one_php_sdk.role_checker: '@VentureLeap\LeapOnePhpSdk\Services\Audit\Security\RoleChecker'

  VentureLeap\LeapOnePhpSdk\EventSubscriber\DoctrineSubscriber:
    tags:
      - { name: 'doctrine.event_subscriber' }
#  DH\AuditorBundle\Event\ViewerEventSubscriber:
#    class: DH\AuditorBundle\Event\ViewerEventSubscriber
#    arguments: ['@DH\Auditor\Auditor']
#    tags:
#      - { name: kernel.event_subscriber }

#  DH\AuditorBundle\Routing\RoutingAnnotationLoader:
#    arguments:
#      - '@routing.loader.annotation'
#      - '%leap_one_php_sdk.provider.doctrine.configuration%'
#    tags:
#      - { name: routing.loader }

#  DH\Auditor\Provider\Doctrine\Persistence\Reader\Reader:
#    class: DH\Auditor\Provider\Doctrine\Persistence\Reader\Reader
#    arguments:
#      - '@DH\Auditor\Provider\Doctrine\DoctrineProvider'
#
#  DH\Auditor\Provider\Doctrine\Persistence\Event\CreateSchemaListener:
#    class: DH\Auditor\Provider\Doctrine\Persistence\Event\CreateSchemaListener
#    arguments: ['@DH\Auditor\Provider\Doctrine\DoctrineProvider']
#    tags:
#      - { name: doctrine.event_subscriber }
#
#  DH\Auditor\Provider\Doctrine\Persistence\Command\CleanAuditLogsCommand:
#    class: DH\Auditor\Provider\Doctrine\Persistence\Command\CleanAuditLogsCommand
#    tags:
#      - { name: 'console.command', command: 'audit:clean' }
#    calls:
#      - [setAuditor, ['@DH\Auditor\Auditor']]
#
#  DH\Auditor\Provider\Doctrine\Persistence\Command\UpdateSchemaCommand:
#    class: DH\Auditor\Provider\Doctrine\Persistence\Command\UpdateSchemaCommand
#    tags:
#      - { name: 'console.command', command: 'audit:schema:update' }
#    calls:
#      - [setAuditor, ['@DH\Auditor\Auditor']]
#
#  # Bundle related services
#  DH\AuditorBundle\Controller\ViewerController:
#    calls:
#      - { method: setContainer, arguments: ['@service_container'] }
#    tags: ['controller.service_arguments']

#  DH\AuditorBundle\Twig\Extension\TwigExtension:
#    class: DH\AuditorBundle\Twig\Extension\TwigExtension
#    arguments:
#      - '@doctrine'
#    tags:
#      - { name: twig.extension }
